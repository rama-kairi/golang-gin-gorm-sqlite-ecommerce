// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rama-kairi/blog-api-golang-gin/ent/category"
	"github.com/rama-kairi/blog-api-golang-gin/ent/predicate"
	"github.com/rama-kairi/blog-api-golang-gin/ent/product"
	"github.com/rama-kairi/blog-api-golang-gin/ent/subcategory"
)

// SubCategoryUpdate is the builder for updating SubCategory entities.
type SubCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *SubCategoryMutation
}

// Where appends a list predicates to the SubCategoryUpdate builder.
func (scu *SubCategoryUpdate) Where(ps ...predicate.SubCategory) *SubCategoryUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *SubCategoryUpdate) SetUpdatedAt(t time.Time) *SubCategoryUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetDeletedAt sets the "deleted_at" field.
func (scu *SubCategoryUpdate) SetDeletedAt(t time.Time) *SubCategoryUpdate {
	scu.mutation.SetDeletedAt(t)
	return scu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scu *SubCategoryUpdate) SetNillableDeletedAt(t *time.Time) *SubCategoryUpdate {
	if t != nil {
		scu.SetDeletedAt(*t)
	}
	return scu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (scu *SubCategoryUpdate) ClearDeletedAt() *SubCategoryUpdate {
	scu.mutation.ClearDeletedAt()
	return scu
}

// SetName sets the "name" field.
func (scu *SubCategoryUpdate) SetName(s string) *SubCategoryUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetCategoryID sets the "category_id" field.
func (scu *SubCategoryUpdate) SetCategoryID(u uuid.UUID) *SubCategoryUpdate {
	scu.mutation.SetCategoryID(u)
	return scu
}

// SetCategory sets the "category" edge to the Category entity.
func (scu *SubCategoryUpdate) SetCategory(c *Category) *SubCategoryUpdate {
	return scu.SetCategoryID(c.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (scu *SubCategoryUpdate) AddProductIDs(ids ...uuid.UUID) *SubCategoryUpdate {
	scu.mutation.AddProductIDs(ids...)
	return scu
}

// AddProducts adds the "products" edges to the Product entity.
func (scu *SubCategoryUpdate) AddProducts(p ...*Product) *SubCategoryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scu.AddProductIDs(ids...)
}

// Mutation returns the SubCategoryMutation object of the builder.
func (scu *SubCategoryUpdate) Mutation() *SubCategoryMutation {
	return scu.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (scu *SubCategoryUpdate) ClearCategory() *SubCategoryUpdate {
	scu.mutation.ClearCategory()
	return scu
}

// ClearProducts clears all "products" edges to the Product entity.
func (scu *SubCategoryUpdate) ClearProducts() *SubCategoryUpdate {
	scu.mutation.ClearProducts()
	return scu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (scu *SubCategoryUpdate) RemoveProductIDs(ids ...uuid.UUID) *SubCategoryUpdate {
	scu.mutation.RemoveProductIDs(ids...)
	return scu
}

// RemoveProducts removes "products" edges to Product entities.
func (scu *SubCategoryUpdate) RemoveProducts(p ...*Product) *SubCategoryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SubCategoryUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks[int, SubCategoryMutation](ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SubCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SubCategoryUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SubCategoryUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SubCategoryUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := subcategory.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SubCategoryUpdate) check() error {
	if v, ok := scu.mutation.Name(); ok {
		if err := subcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SubCategory.name": %w`, err)}
		}
	}
	if _, ok := scu.mutation.CategoryID(); scu.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubCategory.category"`)
	}
	return nil
}

func (scu *SubCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subcategory.Table,
			Columns: subcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subcategory.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(subcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.DeletedAt(); ok {
		_spec.SetField(subcategory.FieldDeletedAt, field.TypeTime, value)
	}
	if scu.mutation.DeletedAtCleared() {
		_spec.ClearField(subcategory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.SetField(subcategory.FieldName, field.TypeString, value)
	}
	if scu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcategory.ProductsTable,
			Columns: []string{subcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !scu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcategory.ProductsTable,
			Columns: []string{subcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcategory.ProductsTable,
			Columns: []string{subcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SubCategoryUpdateOne is the builder for updating a single SubCategory entity.
type SubCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubCategoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *SubCategoryUpdateOne) SetUpdatedAt(t time.Time) *SubCategoryUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetDeletedAt sets the "deleted_at" field.
func (scuo *SubCategoryUpdateOne) SetDeletedAt(t time.Time) *SubCategoryUpdateOne {
	scuo.mutation.SetDeletedAt(t)
	return scuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scuo *SubCategoryUpdateOne) SetNillableDeletedAt(t *time.Time) *SubCategoryUpdateOne {
	if t != nil {
		scuo.SetDeletedAt(*t)
	}
	return scuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (scuo *SubCategoryUpdateOne) ClearDeletedAt() *SubCategoryUpdateOne {
	scuo.mutation.ClearDeletedAt()
	return scuo
}

// SetName sets the "name" field.
func (scuo *SubCategoryUpdateOne) SetName(s string) *SubCategoryUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetCategoryID sets the "category_id" field.
func (scuo *SubCategoryUpdateOne) SetCategoryID(u uuid.UUID) *SubCategoryUpdateOne {
	scuo.mutation.SetCategoryID(u)
	return scuo
}

// SetCategory sets the "category" edge to the Category entity.
func (scuo *SubCategoryUpdateOne) SetCategory(c *Category) *SubCategoryUpdateOne {
	return scuo.SetCategoryID(c.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (scuo *SubCategoryUpdateOne) AddProductIDs(ids ...uuid.UUID) *SubCategoryUpdateOne {
	scuo.mutation.AddProductIDs(ids...)
	return scuo
}

// AddProducts adds the "products" edges to the Product entity.
func (scuo *SubCategoryUpdateOne) AddProducts(p ...*Product) *SubCategoryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scuo.AddProductIDs(ids...)
}

// Mutation returns the SubCategoryMutation object of the builder.
func (scuo *SubCategoryUpdateOne) Mutation() *SubCategoryMutation {
	return scuo.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (scuo *SubCategoryUpdateOne) ClearCategory() *SubCategoryUpdateOne {
	scuo.mutation.ClearCategory()
	return scuo
}

// ClearProducts clears all "products" edges to the Product entity.
func (scuo *SubCategoryUpdateOne) ClearProducts() *SubCategoryUpdateOne {
	scuo.mutation.ClearProducts()
	return scuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (scuo *SubCategoryUpdateOne) RemoveProductIDs(ids ...uuid.UUID) *SubCategoryUpdateOne {
	scuo.mutation.RemoveProductIDs(ids...)
	return scuo
}

// RemoveProducts removes "products" edges to Product entities.
func (scuo *SubCategoryUpdateOne) RemoveProducts(p ...*Product) *SubCategoryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scuo.RemoveProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SubCategoryUpdateOne) Select(field string, fields ...string) *SubCategoryUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SubCategory entity.
func (scuo *SubCategoryUpdateOne) Save(ctx context.Context) (*SubCategory, error) {
	scuo.defaults()
	return withHooks[*SubCategory, SubCategoryMutation](ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SubCategoryUpdateOne) SaveX(ctx context.Context) *SubCategory {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SubCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SubCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SubCategoryUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := subcategory.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SubCategoryUpdateOne) check() error {
	if v, ok := scuo.mutation.Name(); ok {
		if err := subcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SubCategory.name": %w`, err)}
		}
	}
	if _, ok := scuo.mutation.CategoryID(); scuo.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubCategory.category"`)
	}
	return nil
}

func (scuo *SubCategoryUpdateOne) sqlSave(ctx context.Context) (_node *SubCategory, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subcategory.Table,
			Columns: subcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subcategory.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcategory.FieldID)
		for _, f := range fields {
			if !subcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.DeletedAt(); ok {
		_spec.SetField(subcategory.FieldDeletedAt, field.TypeTime, value)
	}
	if scuo.mutation.DeletedAtCleared() {
		_spec.ClearField(subcategory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.SetField(subcategory.FieldName, field.TypeString, value)
	}
	if scuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcategory.ProductsTable,
			Columns: []string{subcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !scuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcategory.ProductsTable,
			Columns: []string{subcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcategory.ProductsTable,
			Columns: []string{subcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubCategory{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
